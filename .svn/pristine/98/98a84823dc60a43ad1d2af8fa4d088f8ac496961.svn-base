/* Copyright 2007-2011 MTA SZTAKI LPDS, Budapest

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License. */
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package nl.amc.biolab.pgportal.portlets.asm;

import hu.sztaki.lpds.pgportal.services.asm.constants.RepositoryItemTypeConstants;
import hu.sztaki.lpds.pgportal.services.asm.ASMService;
import hu.sztaki.lpds.pgportal.services.asm.beans.ASMResourceBean;
import hu.sztaki.lpds.pgportal.services.asm.beans.ASMSQLQueryBean;
import hu.sztaki.lpds.pgportal.services.asm.beans.WorkflowInstanceBean;
import hu.sztaki.lpds.pgportal.services.asm.constants.StatusColorConstants;
import hu.sztaki.lpds.pgportal.services.asm.constants.StatusConstants;
import hu.sztaki.lpds.pgportal.services.asm.exceptions.general.NotMPIJobException;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.portlet.*;
import java.lang.reflect.*;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.portlet.PortletFileUpload;

/**
 *
 * @author Akos Balasko MTA SZTAKI
 */
public class ASM_SamplePortlet extends GenericPortlet {

    private String DISPLAY_PAGE = "/jsp/asm_sample/asmsample.jsp";
    private static final String DETAILS_PAGE="/jsp/asm_sample/details.jsp";
    ASMService asm_service = null;

    public ASM_SamplePortlet() {
        asm_service = ASMService.getInstance();
    }

    /**
     * Handling generic actions 
     */
    public void processAction(ActionRequest request, ActionResponse response) throws PortletException {
        asm_service.init();

        System.out.println("processaction called...");
        String action = "";
        /*        if (request.getAttribute(SportletProperties.ACTION_EVENT) != null) {
        action=(""+request.getAttribute(SportletProperties.ACTION_EVENT)).split("=")[1];
        }
         *
         */
        boolean isMultipart = PortletFileUpload.isMultipartContent(request);
        if (!isMultipart) {

            if ((request.getParameter("action") != null) && (!request.getParameter("action").equals(""))) {
                action = request.getParameter("action");
            }
            System.out.println("*************" + action + "::" + request.getParameter("action"));
            if (action != null) {
                try {
                    Method method = this.getClass().getMethod(action, new Class[]{ActionRequest.class, ActionResponse.class});
                    method.invoke(this, new Object[]{request, response});
                } catch (NoSuchMethodException e) {
                    System.out.println("-----------------------No such method");//+(""+request.getAttribute(SportletProperties.ACTION_EVENT)).split("=")[1]);
                } catch (IllegalAccessException e) {
                    System.out.println("----------------------Illegal access");
                } catch (InvocationTargetException e) {
                    System.out.println("-------------------Invoked function failed");
                    e.printStackTrace();
                }
            }
        } else {
            System.out.println("doUpload called...");
            doUpload(request, response);
        }
    }

    @Override
    public void serveResource(ResourceRequest request, ResourceResponse response) throws PortletException, IOException {

        String userID = request.getRemoteUser();
        String jobport = request.getParameter("file2download");
        Enumeration paramNames = request.getParameterNames();
        String selected_wf = "";
        while(paramNames.hasMoreElements()){
            String act_param = (String)paramNames.nextElement();
            if (act_param.startsWith("instance_download")){
                selected_wf = request.getParameter(act_param);
            }
        }
        
        String[] splitted = jobport.split("@");
        String selected_job = splitted[0];
        try {
            /*
             response.setContentType("application/zip");
            response.setProperty("Content-Disposition", "inline; filename=\"" + selected_wf + "_enduser_outputs.zip\"");
            */


            response.setContentType("application/octet-stream");
            response.setProperty("Content-Disposition", "inline; filename=\"outputFile\"");

            // TODO fix the following line accoring to the new API
            // asm_service.getSingleOutputFileStream(userID, selected_wf, selected_job, "outputFile", response);

        } catch (Exception e) {
            e.printStackTrace();

        }
    }

    /**
     * View user notify settings informations...
     */
    public void doView(RenderRequest req, RenderResponse res) throws PortletException {
        try {
            // System.out.println("doView()...");
            String userID = req.getRemoteUser();
           try {

                req.setAttribute("owners", asm_service.getWorkflowDevelopers(RepositoryItemTypeConstants.Application));
                if (req.getParameter("owner") != null) {
                    String owner = req.getParameter("owner");
                    req.setAttribute("WorkflowList", asm_service.getWorkflowsFromRepository(owner, RepositoryItemTypeConstants.Application));
                    req.setAttribute("rep_owner", req.getParameter("owner"));
                }
                String workflowtobedetailed = (String) req.getParameter("getDetailsforWorkflow");
                if (workflowtobedetailed != null){
                    try{
                        WorkflowInstanceBean wrkdetails= asm_service.getDetails(userID, workflowtobedetailed);
                        req.setAttribute("statusconstants",new StatusConstants());
                        req.setAttribute("statuscolors", new StatusColorConstants());
                        req.setAttribute("workflow_details", wrkdetails);
                        req.setAttribute("selected_Instance",workflowtobedetailed);
                        
                    }
                    catch(Exception ex){
                        System.out.println("no RuntimeID");
                        ex.printStackTrace();
                    }
                }

                //ArrayList avail_wfs = asm_service.getWorkflows(userID);
                req.setAttribute("asm_instances", asm_service.getASMWorkflows(userID));
                
                // TODO fix the following line according to the new ASM API
//                req.setAttribute("portalID", asm_service.PORTAL);


                req.setAttribute("userID", userID);
                // TODO fix the following line according to the new ASM API
//                req.setAttribute("storageurl", asm_service.STORAGE);
                
                if (req.getParameter("content") != null) {
                    //req.setAttribute("command_line_text", req.getParameter("command_line"));
                    req.setAttribute("content", req.getParameter("content"));
                }
                if (req.getParameter("resourcebean") != null){
                    //req.setAttribute("dciresourcequeue", req.getParameter("resourcebean"));
                    req.setAttribute("content", req.getParameter("resourcebean"));
                }
                if (req.getParameter("remotepath") != null){
                    //req.setAttribute("remotepath", req.getParameter("remotepath"));
                    req.setAttribute("content", req.getParameter("remotepath"));
                }
                if (req.getParameter("nodeNumber") != null){
                    req.setAttribute("content", req.getParameter("nodeNumber"));
                }
                if (req.getParameter("act_workflowID") != null) {
                    req.setAttribute("act_workflowID", req.getParameter("act_workflowID"));
                }

            } catch (Exception e) {
                e.printStackTrace();
               
            }

            // Setting next page
            String nextJSP = (String) req.getParameter("nextJSP");
            if (nextJSP == null){
                nextJSP = DISPLAY_PAGE;
            }
            PortletRequestDispatcher dispatcher;
            dispatcher = getPortletContext().getRequestDispatcher(nextJSP);
            dispatcher.include(req, res);
        } catch (IOException ex) {
            Logger.getLogger(ASM_SamplePortlet.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void doGetWorkflowsFromRepository(ActionRequest request, ActionResponse response) throws PortletException {
        String owner = request.getParameter("owner").toString();
        response.setRenderParameter("owner", owner);
    }

    public void doImportWorkflow(ActionRequest request, ActionResponse response) throws PortletException {
        try {
            String impWfType = RepositoryItemTypeConstants.Application;
            String impItemId = request.getParameter("impItemId");
            String owner = request.getParameter("rep_owner").toString();

            Calendar cal = Calendar.getInstance();
            SimpleDateFormat udf = new SimpleDateFormat("yyyyMMddHHmmssSSS");
            String projectName = impItemId + "_"+ udf.format(cal.getTime());

            asm_service.ImportWorkflow(request.getRemoteUser(),projectName, owner, impWfType, impItemId);
        } catch (Exception ex) {
            Logger.getLogger(ASM_SamplePortlet.class.getName()).log(Level.SEVERE, null, ex);
        }


    }

    public void doGoBack(ActionRequest request,ActionResponse response) throws PortletException{
    response.setRenderParameter("nextJSP", DISPLAY_PAGE);


}


    public void doUpload(ActionRequest request, ActionResponse response) throws PortletException {
        try {
             String jobport = "";
             String selected_wf= "";
            //getting upload parameters
            ActionRequest temp_req =request;

            DiskFileItemFactory factory = new DiskFileItemFactory();
            PortletFileUpload pfu = new PortletFileUpload(factory);

            List fileItems = pfu.parseRequest(temp_req);

            Iterator iter = fileItems.iterator();
            FileItem file2upload = null;
            while (iter.hasNext())
            {
                FileItem item = (FileItem)iter.next();
            
        // retrieve hidden parameters if item is a form field
                if (item.isFormField())
                {
                    if (item.getFieldName().equals(new String ("where2upload"))){
                        jobport = item.getString();
                    }
                    if (item.getFieldName().startsWith(new String ("instance_upload"))){
                        selected_wf = item.getString();
                    }
                }
                else {
                    file2upload = item;
                }
            }

            String[] splitted = jobport.split("@");
            String selected_job = splitted[0];

            String selected_port = splitted[1];
            
            String userId = request.getRemoteUser();
            File uploadedFile = asm_service.uploadFiletoPortalServer(file2upload,userId,file2upload.getName());
            asm_service.placeUploadedFile(request.getRemoteUser(), uploadedFile, selected_wf, selected_job, selected_port);


        } catch (Exception ex) {
            ex.printStackTrace();
            Logger.getLogger(ASM_SamplePortlet.class.getName()).log(Level.SEVERE, null, ex);
        }


    }

    public void doDelete(ActionRequest request, ActionResponse response) throws PortletException {
        String userID = (String) request.getRemoteUser();
        String selected_wf = request.getParameter("user_selected_instance");


        asm_service.DeleteWorkflow(userID, selected_wf);
        
    }

    public void doDetails(ActionRequest request,ActionResponse response) throws PortletException{
    String workflowID = request.getParameter("user_selected_instance");
    response.setRenderParameter("nextJSP", DETAILS_PAGE);
    response.setRenderParameter("getDetailsforWorkflow",workflowID);

}
    public void doGetInputValue(ActionRequest request,ActionResponse response) throws PortletException{

            String workflowID = request.getParameter("user_selected_instance");
            String userID = (String) request.getRemoteUser();
            String jobName = "add";
            String portNumber = "1";
        try {
            String inputValue = asm_service.getInputValue(request.getRemoteUser(), workflowID, jobName, portNumber);
            response.setRenderParameter("content", inputValue);
            response.setRenderParameter("act_workflowID", workflowID);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ASM_SamplePortlet.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(ASM_SamplePortlet.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(ASM_SamplePortlet.class.getName()).log(Level.SEVERE, null, ex);
        }

}
    public void doSetInputValue(ActionRequest request,ActionResponse response) throws PortletException{

            String workflowID = request.getParameter("user_selected_instance");
            String textContent = request.getParameter("content");
            String jobName = "add";
            String portNumber = "1";
            try {
            asm_service.setInputValue(textContent, request.getRemoteUser(), workflowID, jobName, portNumber);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ASM_SamplePortlet.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(ASM_SamplePortlet.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(ASM_SamplePortlet.class.getName()).log(Level.SEVERE, null, ex);
        }


}
    public void doGetSQLQuery(ActionRequest request,ActionResponse response) throws PortletException{
       String workflowID = request.getParameter("user_selected_instance");
            String userID = (String) request.getRemoteUser();
            String jobName = "add";
            String portNumber = "2";
        try {
            ASMSQLQueryBean bean = asm_service.getInputSQLQuery(userID, workflowID, jobName, portNumber);

            response.setRenderParameter("content", bean.getSqlUrl()+"@"+bean.getSqlUserName()+"@"+bean.getSqlPassword()+"@"+bean.getSqlQuery());
            response.setRenderParameter("act_workflowID", workflowID);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ASM_SamplePortlet.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(ASM_SamplePortlet.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(ASM_SamplePortlet.class.getName()).log(Level.SEVERE, null, ex);
        }

}
    public void doSetSQLQuery(ActionRequest request,ActionResponse response) throws PortletException{

            String workflowID = request.getParameter("user_selected_instance");
            String textContent = request.getParameter("content");
            String jobName = "add";
            String portNumber = "2";
            String[] sqlAttributes = textContent.split("@"); //
            ASMSQLQueryBean bean = new ASMSQLQueryBean();
            bean.setSqlUrl(sqlAttributes[0]);
            bean.setSqlUserName(sqlAttributes[1]);
            bean.setSqlPassword(sqlAttributes[2]);
            bean.setSqlQuery(sqlAttributes[3]);
        try {
            asm_service.setInputSQLQuery(bean, request.getRemoteUser(), workflowID, jobName, portNumber);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ASM_SamplePortlet.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(ASM_SamplePortlet.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(ASM_SamplePortlet.class.getName()).log(Level.SEVERE, null, ex);
        }
}



    public void doGetInput(ActionRequest request, ActionResponse response) throws PortletException {
        String userID = (String) request.getRemoteUser();
        String selected_wf = request.getParameter("user_selected_instance");
        String selected_job = "add";
       

        String actual_command_line = asm_service.getCommandLineArg(userID, selected_wf, selected_job);
        response.setRenderParameter("content", actual_command_line);
        response.setRenderParameter("act_workflowID", selected_wf);
    }

     public void doGetResource(ActionRequest request, ActionResponse response) throws PortletException {
        String userID = (String) request.getRemoteUser();
        String selectedWf = request.getParameter("user_selected_instance");
        String selectedJob = "add";
        

        ASMResourceBean resourcebean = asm_service.getResource(userID,selectedWf,selectedJob);
        response.setRenderParameter("resourcebean", resourcebean.getType()+"/"+resourcebean.getGrid()+"/"+resourcebean.getResource()+"/"+resourcebean.getQueue());
        response.setRenderParameter("act_workflowID", selectedWf);
    }



      public void doGetRemoteInputPath(ActionRequest request, ActionResponse response) throws PortletException {
        String userID = (String) request.getRemoteUser();
        String selectedWf = request.getParameter("user_selected_instance");
        String selectedJob = "add";
        String selectedPort="0";
        

        String remotepath = asm_service.getRemoteInputPath(userID, selectedWf, selectedJob,selectedPort);
        if (remotepath !=null){
            response.setRenderParameter("remotepath", remotepath);
        }
        response.setRenderParameter("act_workflowID", selectedWf);
    }
      public void doGetNodeNumber(ActionRequest request, ActionResponse response) throws PortletException{
        String userID = (String) request.getRemoteUser();
        String selectedWf = request.getParameter("user_selected_instance");
        String selectedJob = "add";
        String nodeNumber = asm_service.getNodeNumber(userID, selectedWf, selectedJob);
        
        response.setRenderParameter("nodeNumber", nodeNumber);
        response.setRenderParameter("act_workflowID", selectedWf);

    }
      public void doSetNodeNumber(ActionRequest request, ActionResponse response) throws PortletException{

        String userID = (String) request.getRemoteUser();
        String selectedWf = request.getParameter("user_selected_instance");
        String nodeNumber2Set = request.getParameter("content");
        String selectedJob = "add";
        try{
            int nodeNumber = Integer.parseInt(nodeNumber2Set);

            asm_service.setNodeNumber(userID, selectedWf, selectedJob, nodeNumber);
        }
        catch(NotMPIJobException notmpi){
            System.out.println("Job is not an MPI application");
        }
        catch(NumberFormatException ex){
            
        }


    }

       public void doGetRemoteOutputPath(ActionRequest request, ActionResponse response) throws PortletException {
        String userID = (String) request.getRemoteUser();
        String selectedWf = request.getParameter("user_selected_instance");
        String selectedJob = "add";
        String selectedPort="1";
        

        String remotepath = asm_service.getRemoteOutputPath(userID, selectedWf, selectedJob,selectedPort);
        if (remotepath !=null){
            response.setRenderParameter("remotepath", remotepath);
        }
        response.setRenderParameter("act_workflowID", selectedWf);
    }

    public void doSubmit(ActionRequest request, ActionResponse response) throws PortletException {
        try {
            String userID = (String) request.getRemoteUser();
            String selectedWf = request.getParameter("selected_workflow");
            String notifyText = request.getParameter("notifyText");
            String notifyType = request.getParameter("notifyType");
            System.out.println("Workflow: " + selectedWf + " notText:" + notifyText+" notifyType:"+notifyType);
            asm_service.submit(userID, selectedWf,notifyText,notifyType);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ASM_SamplePortlet.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(ASM_SamplePortlet.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(ASM_SamplePortlet.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void doSetInput(ActionRequest request, ActionResponse response) throws PortletException {

        String userID = (String) request.getRemoteUser();
        String selectedWf = request.getParameter("user_selected_instance");

        String actual_command_line = request.getParameter("content");
        String selectedJob = "add";
        asm_service.setCommandLineArg(userID, selectedWf, selectedJob, actual_command_line);
}

    
      public void doSetRemoteInputPath(ActionRequest request, ActionResponse response) throws PortletException {

        String userID = (String) request.getRemoteUser();
        String selectedWf = request.getParameter("user_selected_instance");

        String remotepath = request.getParameter("content");
        String selectedJob = "add";
        String selectedPort="0";


        asm_service.setRemoteInputPath(userID, selectedWf, selectedJob, selectedPort,remotepath);

    }

     public void doSetRemoteOutputPath(ActionRequest request, ActionResponse response) throws PortletException {

        String userID = (String) request.getRemoteUser();
        String selectedWf = request.getParameter("user_selected_instance");

        String remotepath = request.getParameter("content");
        String selectedJob = "add";
        String selectedPort="1";


        asm_service.setRemoteOutputPath(userID, selectedWf, selectedJob, selectedPort,remotepath);

    }
     public void doSetResource(ActionRequest request, ActionResponse response) throws PortletException {

        String userID = (String) request.getRemoteUser();
        String selectedWF = request.getParameter("user_selected_instance");
        String selectedJob = "add";
        String dciresourcequeue = request.getParameter("content");
        String type = dciresourcequeue.split("/")[0];
        String grid = dciresourcequeue.split("/")[1];
        String resource = dciresourcequeue.split("/")[2];
        String queue = dciresourcequeue.split("/")[3];

        asm_service.setResource(userID, selectedWF, selectedJob, type,grid, resource, queue);

    }


}
